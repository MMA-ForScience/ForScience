(* ::Package:: *)

Usage[VariableLeakTracer]="VariableLeakTracer[\"var_1\",\[Ellipsis]] is a [*BuildPaclet*] file preprocessor that issues a message whenever any of the ```var_i``` has be defined.";


Begin["`Private`"]


VariableLeakTracer::leaked = "Variable `` leaked in ``!";


VariableLeakTracer[vars__]:=(
  lastFile="";
  tracedVariables={vars};
  Quiet@Remove@vars;
  iVariableLeakTracer[exprs_]:=(
    If[Length@Names@#>0,
      tracedVariables=DeleteCases[#,tracedVariables];
      Message[VariableLeakTracer::leaked,First@Names@#,lastFile]
    ]&/@tracedVariables;
    lastFile=$ProcessedFile;
    exprs
  );
  iVariableLeakTracer
)


End[]


BuildAction[


DocumentationHeader[VariableLeakTracer]=FSHeader["0.61.0"];


Details[VariableLeakTracer]={
  "[*VariableLeakTracer[\[Ellipsis]]*] is a file preprocessor to be used by [*BuildPaclet*].",
  "[*VariableLeakTracer*] can be used to determine the file where a given variable is defined.",
  "The ```var_i``` in [*VariableLeakTracer[var_1,\[Ellipsis]]*] are expected to be strings as those used by [*Names*].",
  "Typically, the variable masks passed to [*VariableLeakTracer*] specify the symbol context to ensure that the correct file is determined.",
  "[*VariableLeakTracer[\[Ellipsis]]*] effectively calls [*Names*] to check whether a symbol has been defined.",
  "Calling [*VariableLeakTracer[var_1,\[Ellipsis]]*] sets the list of variables to be tracked to {```var```_1,\[Ellipsis]}. All instances of [*VariableLeakTracer[\[Ellipsis]]*] share a single list.",
  "As [*VariableLeakTracer*] is a file pre-processor, the messages generated by [*ProcessFile*] show the file after the offending one.",
  "Leaks in the last loaded file are not detected.",
  "[*VariableLeakTracer*] issues a VariableLeakTracer::leaked message for each leaked symbol.",
  "[*VariableLeakTracer*] does not modify the contents of the processed file."
};


Examples[VariableLeakTracer,"Basic examples"]={
  {
    "Load the ForScience package:",
    ExampleInput[Needs["ForScience`PacletUtils`"]],
    "Create a example paclet:",
    ExampleInput[
      SetDirectory@CreateDirectory[];,
      CreateDirectory["paclet"];,
      "Export[\"paclet/PacletInfo.m\",
        \"Paclet[
          Name->\\\"Test\\\",
          Version->\\\"0.0\\\",
          Extensions->{
            {\\\"Kernel\\\",Context->{
              \\\"paclet`\\\",
              \\\"paclet`sub1`\\\",
              \\\"paclet`sub2`\\\"
            }}
          }
        ]\",
        \"String\"
      ];",
      "Export[\"paclet/paclet.wl\",
        \"
          BeginPackage[\\\"paclet`\\\"];
          aMain=1;
          bMain=2;
          <<paclet`sub1`;
          <<paclet`sub2`;
          EndPackage[];
        \",
        \"String\"
      ];",
      Export["paclet/sub1.wl","aSub1=3;bSub1=4","String"];,
      Export["paclet/sub2.wl","aSub2=5;bSub2=6","String"];,
      InitializationCell->True
    ],
    "Find where ```bMain``` is defined:",
    ExampleInput[BuildPaclet["paclet",{{VariableLeakTracer["paclet`bMain"]},{}}];]
  },
  {
    "Use wildcards:",
    ExampleInput[BuildPaclet["paclet",{{VariableLeakTracer["paclet`a*1"]},{}}];]
  }
};

Examples[VariableLeakTracer,"Possible issues"]={
  {
    "When using wildcards, only the first leaked symbol is found:",
    ExampleInput[BuildPaclet["paclet",{{VariableLeakTracer["paclet`*Sub1"]},{}}];]
  },
  {
    "Variables in the last file are not detected:",
    ExampleInput[BuildPaclet["paclet",{{VariableLeakTracer["paclet`bSub2"]},{}}];],
    ExampleInput[
      NotebookWrite[
        #, 
        NotebookRead[#]/. 
        s_String:>StringReplace[
           s,
           StringExpression@@Riffle[FileNameSplit[Directory[]],"\\"..]->"."
         ]
      ]&/@Cells[CellStyle->"MSG"];,
      Visible->False
    ],
    CleanExampleDirectory
  }
};


SeeAlso[VariableLeakTracer]={BuildPaclet,CompatibilityChecker,UsageCompiler};


]
